//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_WEB.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client_WEB.ServiceReference1.Quiz))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client_WEB.ServiceReference1.Question))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client_WEB.ServiceReference1.QuizAnswers))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client_WEB.ServiceReference1.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client_WEB.ServiceReference1.Student))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Quiz", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Quiz : Client_WEB.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client_WEB.ServiceReference1.Question[] QuestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client_WEB.ServiceReference1.Question[] Questions {
            get {
                return this.QuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionsField, value) != true)) {
                    this.QuestionsField = value;
                    this.RaisePropertyChanged("Questions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Question : Client_WEB.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuizIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] WrongAnswersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answer {
            get {
                return this.AnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerField, value) != true)) {
                    this.AnswerField = value;
                    this.RaisePropertyChanged("Answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuestionContent {
            get {
                return this.QuestionContentField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionContentField, value) != true)) {
                    this.QuestionContentField = value;
                    this.RaisePropertyChanged("QuestionContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuizID {
            get {
                return this.QuizIDField;
            }
            set {
                if ((this.QuizIDField.Equals(value) != true)) {
                    this.QuizIDField = value;
                    this.RaisePropertyChanged("QuizID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] WrongAnswers {
            get {
                return this.WrongAnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.WrongAnswersField, value) != true)) {
                    this.WrongAnswersField = value;
                    this.RaisePropertyChanged("WrongAnswers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuizAnswers", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class QuizAnswers : Client_WEB.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AnswersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuizIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StudentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TimePassedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Answers {
            get {
                return this.AnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswersField, value) != true)) {
                    this.AnswersField = value;
                    this.RaisePropertyChanged("Answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuizID {
            get {
                return this.QuizIDField;
            }
            set {
                if ((this.QuizIDField.Equals(value) != true)) {
                    this.QuizIDField = value;
                    this.RaisePropertyChanged("QuizID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StudentID {
            get {
                return this.StudentIDField;
            }
            set {
                if ((this.StudentIDField.Equals(value) != true)) {
                    this.StudentIDField = value;
                    this.RaisePropertyChanged("StudentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TimePassed {
            get {
                return this.TimePassedField;
            }
            set {
                if ((this.TimePassedField.Equals(value) != true)) {
                    this.TimePassedField = value;
                    this.RaisePropertyChanged("TimePassed");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client_WEB.ServiceReference1.Student))]
    public partial class User : Client_WEB.ServiceReference1.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Full_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ID_NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Full_Name {
            get {
                return this.Full_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Full_NameField, value) != true)) {
                    this.Full_NameField = value;
                    this.RaisePropertyChanged("Full_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID_Number {
            get {
                return this.ID_NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ID_NumberField, value) != true)) {
                    this.ID_NumberField = value;
                    this.RaisePropertyChanged("ID_Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Student : Client_WEB.ServiceReference1.User {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GradeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GradeNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SchoolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((object.ReferenceEquals(this.GradeField, value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GradeNumber {
            get {
                return this.GradeNumberField;
            }
            set {
                if ((this.GradeNumberField.Equals(value) != true)) {
                    this.GradeNumberField = value;
                    this.RaisePropertyChanged("GradeNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string School {
            get {
                return this.SchoolField;
            }
            set {
                if ((object.ReferenceEquals(this.SchoolField, value) != true)) {
                    this.SchoolField = value;
                    this.RaisePropertyChanged("School");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserExistServer", ReplyAction="http://tempuri.org/IService1/IsUserExistServerResponse")]
        bool IsUserExistServer(string IDnumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserExistServer", ReplyAction="http://tempuri.org/IService1/IsUserExistServerResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistServerAsync(string IDnumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserIsAdminServer", ReplyAction="http://tempuri.org/IService1/IsUserIsAdminServerResponse")]
        bool IsUserIsAdminServer(string IDnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserIsAdminServer", ReplyAction="http://tempuri.org/IService1/IsUserIsAdminServerResponse")]
        System.Threading.Tasks.Task<bool> IsUserIsAdminServerAsync(string IDnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsIDnumberExistServer", ReplyAction="http://tempuri.org/IService1/IsIDnumberExistServerResponse")]
        bool IsIDnumberExistServer(string IDnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsIDnumberExistServer", ReplyAction="http://tempuri.org/IService1/IsIDnumberExistServerResponse")]
        System.Threading.Tasks.Task<bool> IsIDnumberExistServerAsync(string IDnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewUserServer", ReplyAction="http://tempuri.org/IService1/InsertNewUserServerResponse")]
        bool InsertNewUserServer(string name, string password, string email, string gender, string IDnumebr, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewUserServer", ReplyAction="http://tempuri.org/IService1/InsertNewUserServerResponse")]
        System.Threading.Tasks.Task<bool> InsertNewUserServerAsync(string name, string password, string email, string gender, string IDnumebr, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateNewPasswordServer", ReplyAction="http://tempuri.org/IService1/UpdateNewPasswordServerResponse")]
        bool UpdateNewPasswordServer(string IDnumber, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateNewPasswordServer", ReplyAction="http://tempuri.org/IService1/UpdateNewPasswordServerResponse")]
        System.Threading.Tasks.Task<bool> UpdateNewPasswordServerAsync(string IDnumber, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserServer", ReplyAction="http://tempuri.org/IService1/GetUserServerResponse")]
        Client_WEB.ServiceReference1.User GetUserServer(string IDnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserServer", ReplyAction="http://tempuri.org/IService1/GetUserServerResponse")]
        System.Threading.Tasks.Task<Client_WEB.ServiceReference1.User> GetUserServerAsync(string IDnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertStudentServer", ReplyAction="http://tempuri.org/IService1/InsertStudentServerResponse")]
        bool InsertStudentServer(string IDnumber, string school, string grade, string gradeNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertStudentServer", ReplyAction="http://tempuri.org/IService1/InsertStudentServerResponse")]
        System.Threading.Tasks.Task<bool> InsertStudentServerAsync(string IDnumber, string school, string grade, string gradeNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentIDServer", ReplyAction="http://tempuri.org/IService1/GetStudentIDServerResponse")]
        int GetStudentIDServer(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentIDServer", ReplyAction="http://tempuri.org/IService1/GetStudentIDServerResponse")]
        System.Threading.Tasks.Task<int> GetStudentIDServerAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentServer", ReplyAction="http://tempuri.org/IService1/GetStudentServerResponse")]
        Client_WEB.ServiceReference1.Student GetStudentServer(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentServer", ReplyAction="http://tempuri.org/IService1/GetStudentServerResponse")]
        System.Threading.Tasks.Task<Client_WEB.ServiceReference1.Student> GetStudentServerAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertQuizServer", ReplyAction="http://tempuri.org/IService1/InsertQuizServerResponse")]
        bool InsertQuizServer(string quizTitle, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertQuizServer", ReplyAction="http://tempuri.org/IService1/InsertQuizServerResponse")]
        System.Threading.Tasks.Task<bool> InsertQuizServerAsync(string quizTitle, string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsQuizExistServer", ReplyAction="http://tempuri.org/IService1/IsQuizExistServerResponse")]
        bool IsQuizExistServer(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsQuizExistServer", ReplyAction="http://tempuri.org/IService1/IsQuizExistServerResponse")]
        System.Threading.Tasks.Task<bool> IsQuizExistServerAsync(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetQuizIDServer", ReplyAction="http://tempuri.org/IService1/GetQuizIDServerResponse")]
        int GetQuizIDServer(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetQuizIDServer", ReplyAction="http://tempuri.org/IService1/GetQuizIDServerResponse")]
        System.Threading.Tasks.Task<int> GetQuizIDServerAsync(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllValidQuizTitlesServer", ReplyAction="http://tempuri.org/IService1/GetAllValidQuizTitlesServerResponse")]
        string[] GetAllValidQuizTitlesServer(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllValidQuizTitlesServer", ReplyAction="http://tempuri.org/IService1/GetAllValidQuizTitlesServerResponse")]
        System.Threading.Tasks.Task<string[]> GetAllValidQuizTitlesServerAsync(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllQuizTitlesServer", ReplyAction="http://tempuri.org/IService1/GetAllQuizTitlesServerResponse")]
        string[] GetAllQuizTitlesServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllQuizTitlesServer", ReplyAction="http://tempuri.org/IService1/GetAllQuizTitlesServerResponse")]
        System.Threading.Tasks.Task<string[]> GetAllQuizTitlesServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteQuizServer", ReplyAction="http://tempuri.org/IService1/DeleteQuizServerResponse")]
        bool DeleteQuizServer(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteQuizServer", ReplyAction="http://tempuri.org/IService1/DeleteQuizServerResponse")]
        System.Threading.Tasks.Task<bool> DeleteQuizServerAsync(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetQuizByTitleServer", ReplyAction="http://tempuri.org/IService1/GetQuizByTitleServerResponse")]
        Client_WEB.ServiceReference1.Quiz GetQuizByTitleServer(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetQuizByTitleServer", ReplyAction="http://tempuri.org/IService1/GetQuizByTitleServerResponse")]
        System.Threading.Tasks.Task<Client_WEB.ServiceReference1.Quiz> GetQuizByTitleServerAsync(string quizTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertQuestionServer", ReplyAction="http://tempuri.org/IService1/InsertQuestionServerResponse")]
        bool InsertQuestionServer(string question, string answer, string[] wrongAnswers, int quizID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertQuestionServer", ReplyAction="http://tempuri.org/IService1/InsertQuestionServerResponse")]
        System.Threading.Tasks.Task<bool> InsertQuestionServerAsync(string question, string answer, string[] wrongAnswers, int quizID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteQuestionsServer", ReplyAction="http://tempuri.org/IService1/DeleteQuestionsServerResponse")]
        bool DeleteQuestionsServer(int quizID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteQuestionsServer", ReplyAction="http://tempuri.org/IService1/DeleteQuestionsServerResponse")]
        System.Threading.Tasks.Task<bool> DeleteQuestionsServerAsync(int quizID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertQuizSubmitServer", ReplyAction="http://tempuri.org/IService1/InsertQuizSubmitServerResponse")]
        bool InsertQuizSubmitServer(int studentID, int score, int quizID, string answers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertQuizSubmitServer", ReplyAction="http://tempuri.org/IService1/InsertQuizSubmitServerResponse")]
        System.Threading.Tasks.Task<bool> InsertQuizSubmitServerAsync(int studentID, int score, int quizID, string answers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentsQuizSubmitionsServer", ReplyAction="http://tempuri.org/IService1/GetStudentsQuizSubmitionsServerResponse")]
        Client_WEB.ServiceReference1.QuizAnswers[] GetStudentsQuizSubmitionsServer(int quizID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentsQuizSubmitionsServer", ReplyAction="http://tempuri.org/IService1/GetStudentsQuizSubmitionsServerResponse")]
        System.Threading.Tasks.Task<Client_WEB.ServiceReference1.QuizAnswers[]> GetStudentsQuizSubmitionsServerAsync(int quizID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client_WEB.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client_WEB.ServiceReference1.IService1>, Client_WEB.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public bool IsUserExistServer(string IDnumber, string password) {
            return base.Channel.IsUserExistServer(IDnumber, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistServerAsync(string IDnumber, string password) {
            return base.Channel.IsUserExistServerAsync(IDnumber, password);
        }
        
        public bool IsUserIsAdminServer(string IDnumber) {
            return base.Channel.IsUserIsAdminServer(IDnumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserIsAdminServerAsync(string IDnumber) {
            return base.Channel.IsUserIsAdminServerAsync(IDnumber);
        }
        
        public bool IsIDnumberExistServer(string IDnumber) {
            return base.Channel.IsIDnumberExistServer(IDnumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsIDnumberExistServerAsync(string IDnumber) {
            return base.Channel.IsIDnumberExistServerAsync(IDnumber);
        }
        
        public bool InsertNewUserServer(string name, string password, string email, string gender, string IDnumebr, string phoneNumber) {
            return base.Channel.InsertNewUserServer(name, password, email, gender, IDnumebr, phoneNumber);
        }
        
        public System.Threading.Tasks.Task<bool> InsertNewUserServerAsync(string name, string password, string email, string gender, string IDnumebr, string phoneNumber) {
            return base.Channel.InsertNewUserServerAsync(name, password, email, gender, IDnumebr, phoneNumber);
        }
        
        public bool UpdateNewPasswordServer(string IDnumber, string newPassword) {
            return base.Channel.UpdateNewPasswordServer(IDnumber, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNewPasswordServerAsync(string IDnumber, string newPassword) {
            return base.Channel.UpdateNewPasswordServerAsync(IDnumber, newPassword);
        }
        
        public Client_WEB.ServiceReference1.User GetUserServer(string IDnumber) {
            return base.Channel.GetUserServer(IDnumber);
        }
        
        public System.Threading.Tasks.Task<Client_WEB.ServiceReference1.User> GetUserServerAsync(string IDnumber) {
            return base.Channel.GetUserServerAsync(IDnumber);
        }
        
        public bool InsertStudentServer(string IDnumber, string school, string grade, string gradeNum) {
            return base.Channel.InsertStudentServer(IDnumber, school, grade, gradeNum);
        }
        
        public System.Threading.Tasks.Task<bool> InsertStudentServerAsync(string IDnumber, string school, string grade, string gradeNum) {
            return base.Channel.InsertStudentServerAsync(IDnumber, school, grade, gradeNum);
        }
        
        public int GetStudentIDServer(int userID) {
            return base.Channel.GetStudentIDServer(userID);
        }
        
        public System.Threading.Tasks.Task<int> GetStudentIDServerAsync(int userID) {
            return base.Channel.GetStudentIDServerAsync(userID);
        }
        
        public Client_WEB.ServiceReference1.Student GetStudentServer(int ID) {
            return base.Channel.GetStudentServer(ID);
        }
        
        public System.Threading.Tasks.Task<Client_WEB.ServiceReference1.Student> GetStudentServerAsync(int ID) {
            return base.Channel.GetStudentServerAsync(ID);
        }
        
        public bool InsertQuizServer(string quizTitle, string startDate, string endDate) {
            return base.Channel.InsertQuizServer(quizTitle, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<bool> InsertQuizServerAsync(string quizTitle, string startDate, string endDate) {
            return base.Channel.InsertQuizServerAsync(quizTitle, startDate, endDate);
        }
        
        public bool IsQuizExistServer(string quizTitle) {
            return base.Channel.IsQuizExistServer(quizTitle);
        }
        
        public System.Threading.Tasks.Task<bool> IsQuizExistServerAsync(string quizTitle) {
            return base.Channel.IsQuizExistServerAsync(quizTitle);
        }
        
        public int GetQuizIDServer(string quizTitle) {
            return base.Channel.GetQuizIDServer(quizTitle);
        }
        
        public System.Threading.Tasks.Task<int> GetQuizIDServerAsync(string quizTitle) {
            return base.Channel.GetQuizIDServerAsync(quizTitle);
        }
        
        public string[] GetAllValidQuizTitlesServer(int studentID) {
            return base.Channel.GetAllValidQuizTitlesServer(studentID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllValidQuizTitlesServerAsync(int studentID) {
            return base.Channel.GetAllValidQuizTitlesServerAsync(studentID);
        }
        
        public string[] GetAllQuizTitlesServer() {
            return base.Channel.GetAllQuizTitlesServer();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllQuizTitlesServerAsync() {
            return base.Channel.GetAllQuizTitlesServerAsync();
        }
        
        public bool DeleteQuizServer(string quizTitle) {
            return base.Channel.DeleteQuizServer(quizTitle);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteQuizServerAsync(string quizTitle) {
            return base.Channel.DeleteQuizServerAsync(quizTitle);
        }
        
        public Client_WEB.ServiceReference1.Quiz GetQuizByTitleServer(string quizTitle) {
            return base.Channel.GetQuizByTitleServer(quizTitle);
        }
        
        public System.Threading.Tasks.Task<Client_WEB.ServiceReference1.Quiz> GetQuizByTitleServerAsync(string quizTitle) {
            return base.Channel.GetQuizByTitleServerAsync(quizTitle);
        }
        
        public bool InsertQuestionServer(string question, string answer, string[] wrongAnswers, int quizID) {
            return base.Channel.InsertQuestionServer(question, answer, wrongAnswers, quizID);
        }
        
        public System.Threading.Tasks.Task<bool> InsertQuestionServerAsync(string question, string answer, string[] wrongAnswers, int quizID) {
            return base.Channel.InsertQuestionServerAsync(question, answer, wrongAnswers, quizID);
        }
        
        public bool DeleteQuestionsServer(int quizID) {
            return base.Channel.DeleteQuestionsServer(quizID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteQuestionsServerAsync(int quizID) {
            return base.Channel.DeleteQuestionsServerAsync(quizID);
        }
        
        public bool InsertQuizSubmitServer(int studentID, int score, int quizID, string answers) {
            return base.Channel.InsertQuizSubmitServer(studentID, score, quizID, answers);
        }
        
        public System.Threading.Tasks.Task<bool> InsertQuizSubmitServerAsync(int studentID, int score, int quizID, string answers) {
            return base.Channel.InsertQuizSubmitServerAsync(studentID, score, quizID, answers);
        }
        
        public Client_WEB.ServiceReference1.QuizAnswers[] GetStudentsQuizSubmitionsServer(int quizID) {
            return base.Channel.GetStudentsQuizSubmitionsServer(quizID);
        }
        
        public System.Threading.Tasks.Task<Client_WEB.ServiceReference1.QuizAnswers[]> GetStudentsQuizSubmitionsServerAsync(int quizID) {
            return base.Channel.GetStudentsQuizSubmitionsServerAsync(quizID);
        }
    }
}
